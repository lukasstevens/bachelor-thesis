# bachelorthesis
from itertools import chain
import os
import shutil
import subprocess
from craftr.foreignbuild import make

session.path.append(local('deps'))
cxx = load('craftr.lang.cxx')
googletest = load('craftr.lib.googletest').googletest
libhdecomp = load('hdecomp').hdecomp

paths = { 
        'metis' : 'deps/metis',
        'kahip' : 'deps/KaHIP',
        }

includes = ['src/include', 'src/main',
        'deps/metis/include', 'deps/KaHIP/interface']

libmetis = Framework()
metis = gentarget(
        [['make','install']],
        cwd = local(paths['metis']),
        outputs = [local('build/metis/lib/libmetis.a')]
        )
cxx.extend_framework(libmetis, metis)

kahip = gentarget(
        [['./compile.sh']],
        cwd = local(paths['kahip']),
        inputs = glob([os.path.join(paths['kahip'], d, '**/*') 
            for d in ['lib', 'interface']]),
        outputs = [local(os.path.join(paths['kahip'], 'deploy/libkahip.a'))]
        )
libkahip = Framework()

mylib = Framework(
        include = [local(x) for x in includes],
        std = 'c++11',
        warn = 'all',
        debug = options.debug,
        optimize = 'debug' if options.debug else 'speed',
        libs = ['m', 'gmpxx', 'gmp', 'mpi', 'gomp'],
        external_libs=[local('build/metis/lib/libmetis.a'), 
            local(os.path.join(paths['kahip'], 'deploy/libkahip.a'))]
        )
mylib_lib = cxx.static_library(
        inputs = cxx.compile_cpp(
            sources = [],
            frameworks = [mylib, libmetis, libkahip, libhdecomp]
            ),
        output = 'mylib'
        )
cxx.extend_framework(mylib, mylib_lib)

test_bin = cxx.executable(
        inputs = cxx.compile_cpp(
            sources = glob('src/test/*.cpp'),
            frameworks = [googletest, mylib]
            ),
        output = 'test'
        )
test = runtarget(test_bin)

cli_bin = cxx.executable(
        inputs = cxx.compile_cpp(
            include = [local('deps/args')],
            sources = glob('src/cli/*.cpp'),
            frameworks = [mylib]
            ),
        output = 'partiton'
        )
cli = runtarget(cli_bin)

run = runtarget(test_bin, 
        '--gtest_filter=Run.DISABLED_FromStdinVerbose', '--gtest_also_run_disabled_tests')

run_cutting = runtarget(test_bin, 
        '--gtest_filter=Run.DISABLED_FromStdinCutting', '--gtest_also_run_disabled_tests')

gdb = gentarget([['gdb', '--args', test_bin]], pool='console', explicit=True)

docs = gentarget([['doxygen', '.doxygen.config']], explicit=True, cwd=project_dir)


# Symlink resource file for execution 
try:
    os.symlink(local('src/test/resources'), local('build/resources'))
except:
    pass

# Configure metis
print("Configuring METIS")
subprocess.call([
    'make', 'config', 
    'cc=\"' + session.options['craftr.lang.cxx.toolkit'] + '\"',
    'prefix=\"' + local('build/metis') + '\"',
    ], 
    cwd = local(paths['metis'])
    )
print("Finished configuring METIS")

