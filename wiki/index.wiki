= Bachelorarbeit =
== Quellen ==
* [[FF13]] -- Algorithmus in Kapitel 3
* [[AR06]] -- Beweis der NP-Vollständigkeit in Kapitel 2

== Literaturrecherche ==
* Nachfolgende Paper
    - http://www.sciencedirect.com/science/article/pii/S0304397513002259
        * Tradeoff zwischen Laufzeit und Lösungsqualität ist unvermeidbar 
        * Für Bäume existiert kein echt polynomieller Algorithmus mit beliebig guter Approximationsgarantie
        * Selber Inhalt wie [[FF13]]?
    - http://dl.acm.org/citation.cfm?id=2745882
        * Online-Scheduling für Graphen
* Vorherige Paper
    - http://dl.acm.org/citation.cfm?id=1496872
        * Interessante Einleitung: Nimmt insbesondere Bezug auf Sparsest Cut Algorithmen
        * Anwendung von Sparsest Cut auf Minimum Bisection
        * Verweist auf rekursiven Finden der Minimum Bisection zur Approximation der k-balancierten Partitionierung
            - Erste Algorithmen für k-balanciertes Partitioning
        * Anwendung: VLSI Design
        * Ergebnis: $O(\sqrt{log n\ log k})$ Approximation für $(k,2)$-Partitionierung
    - http://dl.acm.org/citation.cfm?id=1007931
        * Weitere Referenzen zu Sparsest Cut
        * $(k, 1+\epsilon)$-Partitionierung mit $\alpha = O(log^{1.5}n/\epsilon^2)$
        * $(k,1)$-Partitionierung hat keinen polynomiellen Approximationsalgorithmus
        * Verbesserung zu $\alpha = O(log n)$ in [[FF13]]
    - http://dl.acm.org/citation.cfm?id=909014
        * Paritionierung in Abhängigkeit des maximalen Grades
        * Doktorarbeit: Schwer zu bekommen?
        * Ergebnis: $(k, 1)$-Partitionierung mit $\alpha \in O(\Delta log_\delta(n/k))$ für Bäume mit maximalen Grad $\Delta$
        * Kann generalisiert werden, um eine $(k, 1)$-Partitionierung in polynomieller Zeit für konstantes $k$ zu finden
    - http://epubs.siam.org/doi/abs/10.1137/S0097539796308217
        * $(k,2)$-Partitionierung mit $\alpha \in O(log n)$
* Min-Max Partitionierung


Fragen:
* Welcher Packing Algorithmus?

== Arbeit == 
=== Rust ===
* Library: https://github.com/saschagrunert/indextree

== Code ==

== Gliederung ==
* Abstract
* Einleitung
    - Hinführung zum Thema k-balancierte Partitionierung
    - Definition des Problems
    - Anwendungsfälle
    - Ziel der Bachelorarbeit
    - Vorherige Beiträge
* Theoretischer Hintergrund
    - Beweis der NP-Hardness für Approximationsalgorithmen mit k-balancierter Partitionierung
    - Formale Beschreibung des Algorithmus
        * Einführung und Definitionen
        * Schnittphase
        * Packphase
        * Beweis der Korrektheit und Laufzeit
        * Abschließende Bemerkungen (Erweiterung auf generelle Graphen ...)
* Beschreibung der Implementierung
    - Verwendete Materialen (Programmiersprache, verwendete Bibliotheken, Metis, KaHiP)
    - Verwendete Datenstrukturen
        * Repräsentation des Baums im Speicher
        * Repräsentation der Signaturen
        * Repräsentation einer Menge an Signaturen (Hashmap, Hashing)
        * Repräsentation eines Packings
    - Implementierung des Algorithmus
        * Schnittphase
            - Überblick als Pseudocode
            - Einzelne Subroutinen als Pseudocode
            - Ausgewählte Abschnitte mit C++ Code (evtl. Abschnitte mit der höchsten Auswirkung auf die Performanz)
        * Packphase
            - Überblick als Pseudocode
            - Einzelne Subroutinen als Pseudocode
            - Wenig Auswirkung auf die Performanz => kein C++ Code?
        * Partitionierung
            - Zusammenführung der Schnitt und der Packphase als Pseudocode
    - Vorraussetzungen für und Durchführung des Kompilierungsprozesses
    - Interaktion mit dem Programm 
        * Beschreibung der Programmierschnittstelle 
        * Beschreibung der Kommandozeilenschnittstelle (Entwicklung einer Schnittstelle mit mehr Kontrolle über Ausgabe)
* Ergebnisse
    - Laufzeit in Abhängigkeit der Eingabeparameter (k, epsilon, n, evtl. Maximalgrad, evtl. verschiedene Bäume)
    - Vergleich des Algorithmus mit den Heuristiken auf Bäumen (evtl. verschiedene Heuristiken zur Erstellung der Bäume)
    - Vergleich des Algorithmus mit Heuristiken auf generellen Graphen 
        * unter Verwendung von Hierarchical Decomposition
        * unter Verwendung von Spannbäumen (MST, zufälliger Spannbaum)
* Diskussion
    - Diskussion der Lösungsqualität des Programms (auch im Hinblick auf Heuristiken)
    - Diskussion der Laufzeit im Hinblick auf Verwendung des Programms
    - Kombination von Verkleinerung des Baums und Anwendung des Programms
    - Mögliche Performanzverbesserungen (z.B. Parallelisierung, GPU)
* Zusammenfassung und Ausblick

